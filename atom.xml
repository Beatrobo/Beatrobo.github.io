<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Playground]]></title>
  <link href="http://tech.beatrobo.com/atom.xml" rel="self"/>
  <link href="http://tech.beatrobo.com/"/>
  <updated>2014-07-24T23:44:01+09:00</updated>
  <id>http://tech.beatrobo.com/</id>
  <author>
    <name><![CDATA[Beatrobo, Inc.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beatroboハードウェアハッカソン#1 を開催しました]]></title>
    <link href="http://tech.beatrobo.com/blog/2014/07/24/beatrobo-hardware-hackathon/"/>
    <updated>2014-07-24T23:56:59+09:00</updated>
    <id>http://tech.beatrobo.com/blog/2014/07/24/beatrobo-hardware-hackathon</id>
    <content type="html"><![CDATA[<p>2014年6月14日にBeatrobo引越記念でハードウェアハッカソンを開催しました！</p>

<p><a href="http://beatrobo.doorkeeper.jp/events/12214">【6/14】Beatrobo引越記念！ハードウェア・ロボットハッカソン！！【お題自由。Arduino、BLE、ロボットなんでもOK】</a></p>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/hackathon-view.jpg" width="600"></p>

<p>ハードウェアハッカソンの雰囲気やみなさんの成果などを写真で報告しますっ！</p>

<!-- more -->


<h1>ハッカソンのスケジュール</h1>

<p>スケジュールはこんな感じです。</p>

<ul>
<li>13:00〜13:15  自己紹介 &amp; やること発表</li>
<li>13:15〜20:00  ハッカソンタイム!</li>
<li>20:00〜20:30  成果発表</li>
<li>20:30〜22:00  ピザパーティ</li>
</ul>


<p>今回は土曜のお昼から集中して1日で成果を出すようにしてみました。</p>

<p>経験的に2日もあると疲れるし逆に短いと面白いものができないので、6時間以上の作業時間を設定。</p>

<h1>ハッカソンスタート！</h1>

<p>参加者はエンジニア、デザイナ、アーティストなど様々で(女性2名も！)、Arduino入門される方もいれば3Dプリンタご持参のガチ勢もいるという楽しい雰囲気でスタート。 3Dプリンタって持ち歩くものなのですね！</p>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/3d_printer.jpg" width="600"></p>

<p>せっかくなので、私の水やりロボットのセンサケースを3Dプリンタで作っていただきました。</p>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/3d_printing.jpg" width="600"></p>

<p>3D CAD(弊社では <a href="http://www.autodesk.co.jp/products/autodesk-inventor-family/overview">Autodesk Inventor</a> を利用しています)でロボット型のケースをデザインして、すぐにプリント開始！1時間ほどで完成しました！</p>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/watering_robot_3d_print.jpg" width="600"></p>

<p>かなり細かいところまでちゃんと出力できてて、精度もこの規模の3Dプリンタではかなり出ていました。このプリンタの性能を見て、Beatrobo社内でも3Dプリンタがほしくなりました（笑）</p>

<h1>みなさんの成果発表</h1>

<p>7時間もあっという間で過ぎ去り、夜8時からは成果発表タイムです。</p>

<h2>水やりロボット</h2>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/watering_alert_robot.jpg" width="600"></p>

<ul>
<li>私が取り組んだ課題「水やりロボット」</li>
<li>いろいろ機構を考えているうちにめんどくさくなり、結局「水やりタイミングをhipchatで教えてくれるロボット」という形に着地</li>
<li>方式は「土の湿度を測るセンサ &ndash;> Arduino &ndash;> RaspberryPiが水やりhubotのHTTP API叩く &ndash;> 水やりhubotが水やりタイミングの湿度になっていたらHipChatにつぶやく」</li>
<li>そもそもどれくらいのセンサの値の時に「水やってくれー」とつぶやかせるかを確認するため、2週間くらいはずっとセンサの値をcronでつぶやかせてます</li>
</ul>


<h2>ウェアラブル楽器のプロトタイピング</h2>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/wearable_instrument.jpg" width="600"></p>

<ul>
<li>スボンを叩けばパーカッションの音がなる、というコンセプト</li>
<li>服に導通するインクや、導通する素材をはったり</li>
<li>なんとかズボンを叩いて、PCの中が反応するというものが作れた</li>
</ul>


<h2>アングリーバードのハック</h2>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/angry_bird_hack.jpg" width="600"></p>

<ul>
<li>今回ハードウェアハッカソンという体で開催した中、唯一ハードウェア要素を一切入れなかった猛者</li>
<li>アングリーバードをハックしてAI機能を作ることができるのを試したとのこと</li>
</ul>


<h2>腕時計のプロトタイピング</h2>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/clock_prototype.jpg" width="600"></p>

<ul>
<li>サクラボードとRTCで腕時計のプロトタイピング</li>
<li>aitendo で買ったディスプレイを利用しているとのこと</li>
</ul>


<h2>アルコールがきついとロボットが怒る</h2>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/angry_robot.jpg" width="600"></p>

<ul>
<li>かわいいロボット型アルコールセンサ</li>
<li>アルコール濃度が高いとロボットの目が赤くなる！</li>
</ul>


<h2>Arduino 入門</h2>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/arduino.jpg" width="600"></p>

<ul>
<li><a href="http://www.amazon.co.jp/%E3%81%9F%E3%81%AE%E3%81%97%E3%81%84%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C-Arduino%E3%81%A7%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C%E3%82%92%E3%81%AF%E3%81%98%E3%82%81%E3%82%88%E3%81%86-%E9%AB%98%E6%A9%8B-%E9%9A%86%E9%9B%84/dp/4798032085">たのしい電子工作 Arduinoで電子工作をはじめよう!</a> で Arduino 入門</li>
<li>光の明るさでビープ音の音が変わる</li>
</ul>


<h2>ポケベル打ち用キーボード製作</h2>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/poketbell_keyboard.jpg" width="600"></p>

<ul>
<li>テンキーのキーボードでポケベルうちを実現…のはずがっ！</li>
<li>はんだづけが難しい</li>
</ul>


<h2>温め続けないと再生され続けない動画</h2>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/warming_movie.jpg" width="600"></p>

<ul>
<li>ペルチェ素子とArduino</li>
<li>温もりを与え続けないと動画が止まる</li>
</ul>


<h2>自作のプリント基板の動作確認</h2>

<ul>
<li>かなり複雑なプリント基板の動作確認</li>
<li>仲間といっしょに作っているプロダクトとのこと</li>
</ul>


<h2>周辺の画像をパシャパシャとってくれるロボット</h2>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/image_robot.jpg" width="600"></p>

<ul>
<li>RaspberryPiとマインドストームの組み合わせ</li>
<li>チャットからコントロールできる</li>
</ul>


<h2>水やりロボット プロトタイピング</h2>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/watering_robot_prototype.jpg" width="600"></p>

<ul>
<li>こちらは水やりを自動化させるためのプロトタイピング！</li>
<li>ハムスターの水やりボトルをハックし、サーボを動かすことで水がちょろちょろと出てくるように！</li>
<li>このチームは7時間の作業時間中、4時間ほどを買い出しに費やした猛者</li>
</ul>


<h1>ピザパーティ</h1>

<p>そしてピザパーティへ。</p>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/pizza_party.jpg" width="600"></p>

<p>アーティストさんのメディアアートの実装方法をみんなで検討したりとなかなかおもしろい議論もできました。</p>

<p>そして最後に記念写真を。</p>

<p><img src="http://tech.beatrobo.com/images/201406/hackathon1/hackathon_all.jpg" width="600"></p>

<h1>ハッカソンのKPT</h1>

<h3>Keep</h3>

<ul>
<li>時間的には長すぎず短すぎずぴったりだった</li>
<li><a href="https://pizzahut.jp/pc/top">ピザハット</a> の <a href="https://pizzahut.jp/pc/pizza/W000001176-001">ハッピー4</a> が好評</li>
<li>3Dプリンタがあるとハッカソンが楽しくなる！創れるものの幅が広がる。</li>
<li>12人くらいが現在のオフィスのキャパ &amp; 1人でホストできるちょうど良い人数</li>
</ul>


<h3>Ploblem</h3>

<ul>
<li>ピザやつまみの食べ物系が少なかった</li>
<li>トイレがわかりにくい。場所のアナウンスとホワイトボードに書こう</li>
<li>ハッシュタグの周知がされていなくてまとめにくい。ハッシュタグの周知</li>
</ul>


<h3>Try</h3>

<ul>
<li>3Dプリンタの導入。ハッカソンでもすぐに使えるように</li>
<li>ハッシュタグ、トイレの場所などをホワイトボードに書く</li>
<li>食べ物の充実</li>
</ul>


<h1>次回</h1>

<p>ということで、<a href="http://genkei.thebase.in/items/508236">Trino　新型デルタ3Dプリンター　組立キット</a> を購入いたしました！納品が楽しみです。</p>

<p>次は3Dプリンタ購入記念でハードウェアハッカソンを開きたいと思います。乞うご期待。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IRKitを使ってHipChatからエアコンを制御する]]></title>
    <link href="http://tech.beatrobo.com/blog/2014/02/01/irkit-hipchat-onoff-air/"/>
    <updated>2014-02-01T01:55:46+09:00</updated>
    <id>http://tech.beatrobo.com/blog/2014/02/01/irkit-hipchat-onoff-air</id>
    <content type="html"><![CDATA[<p>どうもはじめまして。Beatrobo竹井(<a href="https://twitter.com/HideyukiTakei">@HideyukiTakei</a>)です。</p>

<p>これからBeatroboエンジニアたちの技術的な話をここにまとめていこうと思います。</p>

<p>第一弾はIRKitに関して！</p>

<p><img src="http://tech.beatrobo.com/images/201405/irkit.jpg" width="600"></p>

<p><a href="http://getirkit.com/">IRKit</a>とは、<a href="https://twitter.com/maaash">@maaash</a>さんが開発しているWiFi機能の付いたオープンソースな赤外線リモコンデバイスです。<a href="https://github.com/irkit/device">Arduinoのソースコードや基板の回路図も公開</a>されています。また、IRKitをローカルネットワークから制御するための<a href="http://getirkit.com/#IRKit-Device-API">Device HTTP API</a>や、インターネット越しに制御するための<a href="http://getirkit.com/#IRKit-Internet-API">Internet HTTP API</a>も用意されています。</p>

<p>今回はこのIRKitを使って<a href="https://www.hipchat.com/%E2%80%8E">HipChat</a>からエアコンを制御する方法を順を追ってご紹介します！</p>

<!-- more -->


<hr />

<h3>1.リモコンON/OFF時の赤外線信号を取得する</h3>

<p>Internet HTTP API の<a href="http://getirkit.com/#IRKit-Internet-GET-1-messages">GET /1/messages</a>を用いることでリモコンの赤外線信号をJSONで取得することができます。</p>

<p>IRKitはBonjourに対応しているようですので、まずIRKitの名前を取得しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ dns-sd -B _irkit._tcp
</span><span class='line'>Browsing for _irkit._tcp
</span><span class='line'>DATE: ---Sat 01 Feb 2014---
</span><span class='line'>15:41:50.027  ...STARTING...
</span><span class='line'>Timestamp     A/R    Flags  if Domain               Service Type         Instance Name
</span><span class='line'>15:41:50.555  Add        2   5 local.               _irkit._tcp.         iRKitD1D1
</span><span class='line'>^C</span></code></pre></td></tr></table></div></figure>


<p>コマンド結果で表示されている <code>iRKitD1D1</code> (仮名)がIRKitの名前です。また、ドメインが <code>local</code> なので、<code>iRKitD1D1 .local</code> がIRKitの宛先となります。</p>

<p>Internet HTTP API を使用するためには clientkey, deviceid が必要で、これらを取得するためには clienttoken が必要です。clienttoken は Device HTTP API の<a href="http://getirkit.com/#IRKit-Device-POST-keys">POST /1/keys</a>で取得できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i "http://iRKitD1D1.local/keys" -d ""
</span><span class='line'>{"clienttoken":"00112233445566778899AABBCCDDEEFF"}</span></code></pre></td></tr></table></div></figure>


<p>ここで得られた clienttoken を使って Internet HTTP API の <a href="http://getirkit.com/#IRKit-Internet-POST-1-keys">POST /keys</a> で clientkey, deviceid を取得します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$curl -i "http://api.getirkit.com/1/keys" -d "clienttoken= 00112233445566778899AABBCCDDEEFF"
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: ngx_openresty
</span><span class='line'>Date: Tue, 07 Jan 2014 08:46:06 GMT
</span><span class='line'>Content-Type: application/json; charset=utf-8
</span><span class='line'>Content-Length: 94
</span><span class='line'>Connection: keep-alive
</span><span class='line'>X-Content-Type-Options: nosniff
</span><span class='line'>
</span><span class='line'>{"deviceid":"0123456789ABCDEF0123456789ABCDEF","clientkey":"FEDCBA9876543210FEDCBA9876543210"}</span></code></pre></td></tr></table></div></figure>


<p>これで Internet HTTP API を使う準備は完了です。</p>

<p>次は赤外線信号の取り込みです。 Internet HTTP API の <a href="http://getirkit.com/#IRKit-Internet-GET-1-messages">GET /1/messages</a> は最も新しい受信した赤外線信号を返してくれるAPIです。
新しい赤外線信号がIRKitデバイスから届いたらただちにレスポンスを返します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i "http://api.getirkit.com/1/messages?clientkey= FEDCBA9876543210FEDCBA9876543210&clear=1"</span></code></pre></td></tr></table></div></figure>


<p>ロングポーリングでレスポンスが返ってこない状態になります。</p>

<p>次に、IRKitにリモコンを向けながら、エアコンONボタンを1度だけ押してみましょう。青色LEDが点滅したら赤外線信号受信ができているようです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: ngx_openresty
</span><span class='line'>Date: Sat, 01 Feb 2014 07:43:49 GMT
</span><span class='line'>Content-Type: application/json; charset=utf-8
</span><span class='line'>Content-Length: 2506
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Access-Control-Allow-Headers: X-Requested-With
</span><span class='line'>ETag: "-1919363029"
</span><span class='line'>X-Content-Type-Options: nosniff
</span><span class='line'>
</span><span class='line'>{"message":{"format":"raw","freq":38,"data":[5408,6648,262,6424,322,1366,382,1232,205,1622,280,1275,395,1413,205,1275,539,1037,619,1111,539,1073,663,968,761,968,619,1232,470,1111,558,1111,619,1073,619,968,619,968,735,1073,663,904,735,968,735,968,735,2626,710,904,904,904,735,904,735,904,815,904,710,968,710,968,710,873,873,873,873,873,761,873,873,873,873,873,761,873,873,873,873,873,873,873,873,873,873,873,873,873,761,873,761,873,761,2537,873,873,873,2537,873,2537,873,2537,873,873,873,2537,873]},"hostname":"IRKitD2C7","deviceid":"32658096E6ED4AE3977E4B6BEFCA5493"}</span></code></pre></td></tr></table></div></figure>


<p>この<code>message</code>部分がエアコンONの赤外線信号のJSONです。</p>

<hr />

<h3>2.Internet HTTP APIを使ってエアコンをONする</h3>

<p>さきほど得られたmessageのJSONを使って、試しにエアコンをONにしてみましょう。Internet HTTP API の <a href="http://getirkit.com/#IRKit-Internet-POST-1-messages">POST /1/messages</a> を使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -i "http://api.getirkit.com/1/messages" \
</span><span class='line'>-d "clientkey=FEDCBA9876543210FEDCBA9876543210" \
</span><span class='line'>-d "deviceid=0123456789ABCDEF0123456789ABCDEF" \
</span><span class='line'>-d 'message={"format":"raw","freq":38,"data":[5408,6648,262,6424,322,1366,382,1232,205,1622,280,1275,395,1413,205,1275,539,1037,619,1111,539,1073,663,968,761,968,619,1232,470,1111,558,1111,619,1073,619,968,619,968,735,1073,663,904,735,968,735,968,735,2626,710,904,904,904,735,904,735,904,815,904,710,968,710,968,710,873,873,873,873,873,761,873,873,873,873,873,761,873,873,873,873,873,873,873,873,873,873,873,873,873,761,873,761,873,761,2537,873,873,873,2537,873,2537,873,2537,873,873,873,2537,873]}'
</span><span class='line'>HTTP/1.1 100 Continue
</span><span class='line'>
</span><span class='line'>HTTP/1.1 200 OK
</span><span class='line'>Server: ngx_openresty
</span><span class='line'>Date: Sat, 01 Feb 2014 07:47:26 GMT
</span><span class='line'>Content-Type: text/html; charset=utf-8
</span><span class='line'>Content-Length: 0
</span><span class='line'>Connection: keep-alive
</span><span class='line'>Access-Control-Allow-Origin: *
</span><span class='line'>Access-Control-Allow-Headers: X-Requested-With
</span><span class='line'>X-Content-Type-Options: nosniff</span></code></pre></td></tr></table></div></figure>


<p>これでエアコンがつくはずです！
次にこのAPIをHipChatから叩けるようにしてみましょう。</p>

<hr />

<h3>3.HUBOTをローカルで動かす</h3>

<p>HipChatからIRKitのInternet HTTP APIを使うために、チャットボット<a href="http://hubot.github.com/">HUBOT</a>とそのHipChatアダプタ<a href="https://github.com/hipchat/hubot-hipchat">hubot-hipchat</a>を利用します。今回は自分のMac上でHUBOTを動かしてみましょう。</p>

<p>まず、HUBOTをインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install --global coffee-script hubot@v2.6.4</span></code></pre></td></tr></table></div></figure>


<p>そしてHUBOTのプロジェクトテンプレートを作成。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hubot --create hubot
</span><span class='line'>$ cd hubot
</span><span class='line'>$ ls
</span><span class='line'>Procfile               README.md              bin/                   external-scripts.json  hubot-scripts.json     package.json           scripts/</span></code></pre></td></tr></table></div></figure>


<p>hubot-hipchat をインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install
</span><span class='line'>$ npm install --save hubot-hipchat</span></code></pre></td></tr></table></div></figure>


<p>初期状態だとRedisを使うようになっているのですが、今回は特に使わないので <code>hubot-scripts.json</code> を編集して該当スクリプトを無効にします。</p>

<figure class='code'><figcaption><span>hubot-scripts.json </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span><span class="s2">&quot;shipit.coffee&quot;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>これでHUBOTの準備は整いました。</p>

<p>次にHipChat側でボット用のアカウントを作成しましょう(HipChatはボットにも月$2かかっちゃうのが残念）。アカウント作成はHipChatのWebサイトから行います。</p>

<p>HUBOTからHipChatのルームにアクセスするためには以下の情報が必要です。</p>

<ul>
<li>ボットアカウントのJID: XMPP/Jaberのアカウント名</li>
<li>パスワード: ボットアカウントを作った時のパスワード</li>
<li>ルームのJID: ルームは<a href="http://xmpp.org/extensions/xep-0045.html">XMPPのMUC</a>で実装されているようです</li>
</ul>


<p>ボットアカウントとルームのJIDは、HipChatのWebページの <code>My account</code> &ndash;> <code>Account settings</code> &ndash;> <code>XMPP/Jabber info</code> に掲載されています。</p>

<p><img src="http://tech.beatrobo.com/images/201405/hipchat_settings.png" alt="HipChat setting" /></p>

<p>ルームのJIDは、「ルームのXMPP/JabberName@ルームのドメイン」となります。上の画像だと、「****_android@conf.hipchat.com」がルームのJIDとなります。</p>

<p>上記の3つの情報を元にHUBOTを起動してみましょう。起動するためのスクリプト <code>run.sh</code> を以下のように書きます。exportしている情報は上記でゲットしたものを入力してください。</p>

<figure class='code'><figcaption><span>run.sh </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nb">export </span><span class="nv">HUBOT_HIPCHAT_JID</span><span class="o">=</span><span class="s2">&quot;01234_56789@chat.hipchat.com&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">HUBOT_HIPCHAT_PASSWORD</span><span class="o">=</span><span class="s2">&quot;passworddayo&quot;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">HUBOT_HIPCHAT_ROOMS</span><span class="o">=</span><span class="s2">&quot;01234_android@conf.hipchat.com&quot;</span> <span class="c"># ROOM JID</span>
</span><span class='line'>
</span><span class='line'>bin/hubot --adapter hipchat
</span></code></pre></td></tr></table></div></figure>


<p>そして実行！</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bash run.sh
</span><span class='line'>[Sun Feb 02 2014 07:45:59 GMT+0900 (JST)] INFO Connecting HipChat adapter...
</span><span class='line'>[Sun Feb 02 2014 07:46:03 GMT+0900 (JST)] INFO Connected to hipchat.com as @hubot
</span><span class='line'>[Sun Feb 02 2014 07:46:03 GMT+0900 (JST)] WARNING The HUBOT_AUTH_ADMIN environment variable not set
</span><span class='line'>[Sun Feb 02 2014 07:46:04 GMT+0900 (JST)] INFO Joining 01234_android@conf.hipchat.com</span></code></pre></td></tr></table></div></figure>


<p>ルームに以下の表示が出ていれば成功です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[HUBOTアカウントのニックネーム] joined the room</span></code></pre></td></tr></table></div></figure>


<hr />

<h3>4.HUBOTにエアコン機能を付け加える</h3>

<p>HUBOT に hubot-hipchat アダプタを追加することで、HUBOTが参加しているルームに流れてくる文字列を読み取り、コマンドに応じた処理を実行することができるようになりました。</p>

<p>どういうコマンドが来たらどういう処理をするか、ということは <code>scripts</code> ディレクトリのスクリプトで定義されています。新しいコマンドとその処理の定義は、こちらの <code>scripts</code> ディレクトリにスクリプトを追加することで可能となります。</p>

<p>今回は <code>air</code> というエアコンコマンドを実装してみましょう。「@hubot air on」でエアコンをON、「@hubot air off」でエアコンをOFFできるようにするスクリプトは以下です。</p>

<figure class='code'><figcaption><span>air.coffee </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Description:</span>
</span><span class='line'><span class="c1">#   Air controller</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Commands:</span>
</span><span class='line'><span class="c1">#   hubot air (on|off) - switch air</span>
</span><span class='line'>
</span><span class='line'><span class="nv">module.exports = </span><span class="nf">(robot) -&gt;</span>
</span><span class='line'>  <span class="nv">IRKIT_MESSAGE_API = </span><span class="s">&quot;http://api.getirkit.com/1/messages&quot;</span>
</span><span class='line'>  <span class="nv">CLIENT_KEY = </span><span class="s">&quot;YOUR_CLIENT_KEY&quot;</span>
</span><span class='line'>  <span class="nv">DEVICE_ID = </span><span class="s">&quot;YOUR_DEVICE_ID&quot;</span>
</span><span class='line'>  <span class="nv">MESSAGE_ON = </span><span class="s">&#39;{&quot;format&quot;:&quot;raw&quot;,&quot;freq&quot;:38,&quot;data&quot;:[6648,3341,843,・・省略・・,843,2537,843]}&#39;</span> <span class="c1"># your ON message</span>
</span><span class='line'>  <span class="nv">MESSAGE_OFF = </span><span class="s">&#39;{&quot;format&quot;:&quot;raw&quot;,&quot;freq&quot;:38,&quot;data&quot;:[6881,3228,904,・・省略・・,935,2451,935]}&#39;</span> <span class="c1"># your OFF message</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">postIRKit = </span><span class="nf">(msg, json, output) -&gt;</span>
</span><span class='line'>    <span class="nx">robot</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">http</span> <span class="nx">IRKIT_MESSAGE_API</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">query</span>
</span><span class='line'>        <span class="nv">clientkey: </span><span class="nx">CLIENT_KEY</span>
</span><span class='line'>        <span class="nv">deviceid: </span><span class="nx">DEVICE_ID</span>
</span><span class='line'>        <span class="nv">message: </span><span class="nx">json</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">post</span> <span class="nf">(err, res, body) -&gt;</span>
</span><span class='line'>        <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="nx">output</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">respond</span> <span class="sr">/air (on|off)/i</span><span class="p">,</span> <span class="nf">(msg) -&gt;</span>
</span><span class='line'>    <span class="nv">sw = </span><span class="nx">msg</span><span class="p">.</span><span class="nx">match</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">sw</span> <span class="o">is</span> <span class="s">&quot;on&quot;</span>
</span><span class='line'>      <span class="nx">postIRKit</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">MESSAGE_ON</span><span class="p">,</span> <span class="s">&quot;ON&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nx">postIRKit</span> <span class="nx">msg</span><span class="p">,</span> <span class="nx">MESSAGE_OFF</span><span class="p">,</span> <span class="s">&quot;OFF&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>HUBOTのスクリプトは、基本的には以下の形式で反応させたいコマンドを正規表現で指定して、内部に処理を書いていきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  robot.respond /air (on|off)/i, (msg) -&gt;</span></code></pre></td></tr></table></div></figure>


<p>scripts ディレクトリにはたくさんのスクリプトが入っているので、それらを見れば雰囲気はだいたい把握できると思います！</p>

<p>これで再度</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bash run.sh</span></code></pre></td></tr></table></div></figure>


<p>を実行して、HUBOTがいる部屋で <code>@hubot air on</code> とつぶやいてみましょう。</p>

<p><img src="http://tech.beatrobo.com/images/201405/hipchat_air_on.png" alt="HUBOT AIR" /></p>

<p>これで快適エアコンライフ！がんばれば温度もコントロールできそうです。</p>

<p>上記のコードは <a href="https://github.com/hideyuki/hubot-hipchat-air">GitHub</a> に公開しています。</p>

<p>Beatroboではこのhubotちゃんを Heroku で動かしてます。
もしエアコン大好きな方はぜひBeatroboに遊びに来てください。</p>

<p>ではでは！あでゅ！</p>
]]></content>
  </entry>
  
</feed>
